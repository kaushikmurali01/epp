# Weather Query
weather_query = "select year, month, sum(temp),sum(rel_hum), sum(precip_amount),sum(wind_spd),sum(station_press)  from weather_data where facility_id = 336 group by year, month order by year, month"

# Summary
# Outliers Query

outlier_summary = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = {}), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - {} * (Q3 - Q1)) AS lower_bound, (Q3 +    {} * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT meter_name, meter_type, CASE WHEN meter_type = 1 THEN 'ELECTRICITY' WHEN meter_type = 2 THEN 'WATER' WHEN meter_type = 3 THEN 'NG' ELSE 'Unknown' END AS meter_name, COUNT(id) AS total_records, TO_CHAR(MIN(start_date), 'YYYY/MM/DD HH24:MI') AS time_stamp_start, TO_CHAR(MAX(end_date), 'YYYY/MM/DD HH24:MI') AS time_stamp_end, CASE WHEN reading < lower_bound THEN 'Lower limit' WHEN reading > upper_bound THEN 'Upper limit' END AS bound_type FROM meter_hourly_entries JOIN outlier_ranges ON facility_id = {}  AND reading NOT IN (0, 'NaN') AND (reading < lower_bound OR reading > upper_bound) AND is_independent_variable = {} GROUP BY meter_name, meter_type, bound_type ORDER BY bound_type desc,meter_type;"

# Observed Data
# observed_data_summary = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = {} ), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - {} * (Q3 - Q1)) AS lower_bound, (Q3 + {}   * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT meter_name, meter_type, CASE WHEN meter_type = 1 THEN 'ELECTRICITY' WHEN meter_type = 2 THEN 'WATER' WHEN meter_type = 3 THEN 'NG' ELSE 'Unknown' END AS meter_type_name, COUNT(id) AS count_id, MIN(start_date) AS min_start_date, MAX(end_date) AS max_end_date FROM meter_hourly_entries JOIN outlier_ranges ON facility_id = {} WHERE reading NOT IN (0, 'NaN') AND reading >= lower_bound AND reading <= upper_bound AND is_independent_variable = {} GROUP BY meter_name, meter_type ORDER BY meter_type;"
observed_data_summary = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = {}), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - {} * (Q3 - Q1)) AS lower_bound, (Q3 + {} * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT meter_type, CASE WHEN meter_type = 1 THEN 'ELECTRICITY' WHEN meter_type = 2 THEN 'WATER' WHEN meter_type = 3 THEN 'NG' ELSE 'Unknown' END AS meter_name, COUNT(id) AS total_records, TO_CHAR(MIN(start_date), 'YYYY/MM/DD HH24:MI') AS time_stamp_start, TO_CHAR(MAX(end_date), 'YYYY/MM/DD HH24:MI') AS time_stamp_end FROM meter_hourly_entries JOIN outlier_ranges ON facility_id = {} WHERE reading NOT IN (0, 'NaN') AND reading >= lower_bound AND reading <= upper_bound AND is_independent_variable = {} GROUP BY meter_name, meter_type ORDER BY meter_type;"
# Missing Data
# missing_data_summary = "SELECT meter_name as literal_meter_name, meter_type, CASE WHEN meter_type = 1 THEN 'ELECTRICITY' WHEN meter_type = 2 THEN 'WATER' WHEN meter_type = 3 THEN 'NG' ELSE 'Unknown' END AS meter_name, COUNT(id) AS total_records, MIN(start_date) AS time_stamp_start, MAX(end_date) AS time_stamp_end FROM meter_hourly_entries WHERE facility_id = {} AND (reading = 0 OR reading = 'NaN' OR reading IS NULL) AND is_independent_variable = {} GROUP BY meter_name, meter_type ORDER BY meter_type;"
missing_data_summary = "SELECT meter_type, CASE WHEN meter_type = 1 THEN 'ELECTRICITY' WHEN meter_type = 2 THEN 'WATER' WHEN meter_type = 3 THEN 'NG' ELSE 'Unknown' END AS meter_type_name, COUNT(id) AS total_records, TO_CHAR(MIN(start_date), 'YYYY/MM/DD HH24:MI') AS time_stamp_start, TO_CHAR(MAX(end_date), 'YYYY/MM/DD HH24:MI') AS time_stamp_end FROM meter_hourly_entries WHERE facility_id = {} AND (reading = 0 OR reading = 'NaN' OR reading IS NULL) AND is_independent_variable = {} GROUP BY meter_name, meter_type ORDER BY meter_type;"

# Outlier Detail

# upper_bound_outlier_detail = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = 336), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - 1.5 * (Q3 - Q1)) AS lower_bound, (Q3 + 1.5 * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries e JOIN outlier_ranges o ON e.facility_id = 336 WHERE e.reading NOT IN (0, 'NaN') AND (e.reading > o.upper_bound) AND e.is_independent_variable = False AND e.meter_type = 1 ORDER BY e.meter_type, e.start_date, e.end_date;"
upper_bound_outlier_detail = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = {}), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - {} * (Q3 - Q1)) AS lower_bound,      (Q3 + {} * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries e JOIN outlier_ranges o ON e.facility_id = {} WHERE e.reading NOT IN (0, 'NaN') AND (e.reading > o.upper_bound) AND e.is_independent_variable = {} AND e.meter_type = {} ORDER BY e.meter_type, e.start_date, e.end_date;"


# lower_bound_outlier_detail = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = 336), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - 1.5 * (Q3 - Q1)) AS lower_bound, (Q3 + 1.5 * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries e JOIN outlier_ranges o ON e.facility_id = 336 WHERE e.reading NOT IN (0, 'NaN') AND (e.reading < o.lower_bound) AND e.is_independent_variable = False AND e.meter_type = 1 ORDER BY e.meter_type, e.start_date, e.end_date;"
lower_bound_outlier_detail = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = 336), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - 1.5 * (Q3 - Q1)) AS lower_bound, (Q3 + 1.5 * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries e JOIN outlier_ranges o ON e.facility_id = 336 WHERE e.reading NOT IN (0, 'NaN') AND (e.reading < o.lower_bound) AND e.is_independent_variable = False AND e.meter_type = 1 ORDER BY e.meter_type, e.start_date, e.end_date;"


# Observed Data Detail
# observed_data_detail = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id = 336), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - 1.5 * (Q3 - Q1)) AS lower_bound, (Q3 + 1.5 * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries e JOIN outlier_ranges o ON e.reading NOT IN (0, 'NaN') AND e.facility_id = 336 AND e.reading >= o.lower_bound AND e.reading <= o.upper_bound WHERE e.is_independent_variable = False AND e.meter_type = 1 ORDER BY e.start_date, e.end_date;"
observed_data_detail = "WITH quartiles AS (SELECT percentile_cont(0.25) WITHIN GROUP (ORDER BY reading) AS Q1, percentile_cont(0.75) WITHIN GROUP (ORDER BY reading) AS Q3 FROM meter_hourly_entries WHERE reading NOT IN (0, 'NaN') AND facility_id =    {}), outlier_ranges AS (SELECT Q1, Q3, (Q3 - Q1) AS IQR, (Q1 - {} * (Q3 - Q1)) AS lower_bound, (Q3 + {} * (Q3 - Q1)) AS upper_bound FROM quartiles) SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries e JOIN outlier_ranges o ON e.reading NOT IN (0, 'NaN') AND e.facility_id = {} AND e.reading >= o.lower_bound AND e.reading <= o.upper_bound WHERE e.is_independent_variable = {} AND e.meter_type = {} ORDER BY e.start_date, e.end_date limit 50;"

# MissingData
# missing_data_detail = "SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries AS e WHERE e.reading IN (0, 'NaN') AND e.meter_type = 3 AND e.facility_id = 336 AND e.is_independent_variable = False;"
missing_data_detail = "SELECT e.start_date, e.end_date, e.reading FROM meter_hourly_entries AS e WHERE e.reading IN (0, 'NaN') AND e.meter_type = {} AND e.facility_id = {} AND e.is_independent_variable = {};"



